<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:mock="http://www.mulesoft.org/schema/mule/mock" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd">
    <spring:beans>
        <spring:import resource="classpath:users-api.xml" />
        <spring:import resource="classpath:global.xml" />
        <spring:import resource="classpath:implementation.xml" />
    </spring:beans>
    <munit:config mock-connectors="false" mock-inbounds="false" doc:name="MUnit configuration"/>
    <http:request-config name="HTTP_Request_Configuration" host="localhost" port="8083" basePath="/api" doc:name="HTTP Request Configuration"/>
    <munit:test name="get:/getUser/userID:users-api-config-200-application/json-FlowTest" description="Verifying functionality of [get:/getUser/userID:users-api-config-200-application/json]" ignore="true">
        <mock:when messageProcessor=".*:.*" doc:name="Mock retrieve user">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Retrieve user']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[[{'gender' :'M', 'dateRegistered' : formatDate('2012-08-20'), 'username' : 'cardo', 'fullname' : 'Cardo Dalisay','birthday' : formatDate('1998-01-18')}]]" mimeType="application/java"/>
        </mock:when>
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/getUser/{userID}" doc:name="HTTP">
            <http:request-builder>
                <http:uri-param paramName="userID" value="user1"/>
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="client_id" value="myAccessToken"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_getuser_{userid}_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/getUser/userID:users-api-config-500-application/json-FlowTest" description="Verifying functionality of [get:/getUser/userID:users-api-config-500-application/json]" ignore="true">
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/getUser/{userID}" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="client_id" value="myAccessToken"/>

            </http:request-builder>
            <http:success-status-code-validator values="500" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(500))]" doc:name="assert that - http.status eq 500" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_500_getuser_{userid}_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/getUsers:users-api-config-200-application/json-FlowTest" description="Verifying functionality of [get:/getUsers:users-api-config-200-application/json]" ignore="true">
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/getUsers" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="client_id" value="myAccessToken"/>

            </http:request-builder>
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(200))]" doc:name="assert that - http.status eq 200" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_200_getusers_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/getUsers:users-api-config-404-application/json-FlowTest" description="Verifying functionality of [get:/getUsers:users-api-config-404-application/json]" ignore="true">
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/getUsers" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/json"/>
                <http:header headerName="client_id" value="myAccessToken"/>

            </http:request-builder>
            <http:success-status-code-validator values="404" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(404))]" doc:name="assert that - http.status eq 404" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_404_getusers_application_json.json').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
    <munit:test name="get:/getUsers:users-api-config-500-application/xml-FlowTest" description="Verifying functionality of [get:/getUsers:users-api-config-500-application/xml]" ignore="true">
        <http:request config-ref="HTTP_Request_Configuration" method="GET" path="/getUsers" doc:name="HTTP">
            <http:request-builder>
                <http:header headerName="Accept" value="application/xml"/>
                <http:header headerName="client_id" value="myAccessToken"/>

            </http:request-builder>
            <http:success-status-code-validator values="500" />
        </http:request>
        <object-to-string-transformer doc:name="http response to string" />
        <munit:assert-true message="The HTTP Status code is not correct!" condition="#[messageInboundProperty('http.status').is(eq(500))]" doc:name="assert that - http.status eq 500" />
        <munit:assert-on-equals message="The response payload is not correct!" expectedValue="#[getResource('scaffolder/response/get_500_getusers_application_xml.txt').asString()]" actualValue="#[payload]" doc:name="assert that - payload is as expected" />
    </munit:test>
</mule>
